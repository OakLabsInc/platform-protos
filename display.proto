syntax = "proto3";

import "google/protobuf/empty.proto";

package oak.platform;

// Configure displays (monitors, TVs, etc) that are connected to the host
//
// All of the displays are configured together at once using the
// Display.Configure RPC. Enabled displays will not overlap or
// "mirror" each other.
//
// A "mode" is a string representing a resolution and framerate
// together, e.g. "1024x768@60.00". Because values for modes must be
// an exact text match in order to be recognized they should only be
// generated by this service. Users should not attempt to apply a
// mode to a display if it is not listed in that display's
// 'available_modes'.
//
// 'display_id' values come from the name of the physical port the
// display is plugged into e.g. "HDMI1" and "DP1".
service Display {

  // Lists displays, current configuration and supported configurations
  rpc Info (google.protobuf.Empty) returns (DisplayInformation) {}

  // Set configuration for all displays
  rpc Configure (MultiDisplayConfiguration) returns (google.protobuf.Empty) {}
}

message DisplayInformation {

  // Current configuration of all displays
  MultiDisplayConfiguration current_configuration = 1;

  // Maps display_id to what modes the connected display supports
  map<string,DisplayCapabilities> display_capabilities = 2;

  message DisplayCapabilities {

    // The "native" resolution and framerate
    string preferred_mode = 1;

    // All values that will work in DisplayConfiguration.mode
    repeated string supported_modes = 2;
  }
}

message MultiDisplayConfiguration {

  // Dots Per Inch for all displays
  // If 0 is specified, the default of 96 will be used
  uint32 dpi = 1;

  // Map display_id to per-display configuration
  map<string,DisplayConfiguration> displays = 2;
}

message DisplayConfiguration {

  // Disables the display
  // This does not actually "power off" the display however
  bool off = 1;

  // Resolution and framerate
  // Value should be taken from Display.Info response
  // Use empty-string to automatically use the "preferred_mode"
  string mode = 2;

  // Rotation and reflection of display image
  // FORWARD_* means only rotating
  // BACKWARD_* means flip on the horizontal axis before rotating
  Orientation orientation = 3;
}

enum Orientation {
  FORWARD_UPRIGHT = 0;
  FORWARD_LEFT = 1;
  FORWARD_RIGHT = 2;
  FORWARD_INVERTED = 3;
  BACKWARD_UPRIGHT = 4;
  BACKWARD_LEFT = 5;
  BACKWARD_RIGHT = 6;
  BACKWARD_INVERTED = 7;
}
