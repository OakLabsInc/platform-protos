syntax = "proto3";

import "google/protobuf/empty.proto";
import "providers/payment/freedompay.proto";

package oak.platform;

/*
Unified payment service which supports multiple payment providers.
Current providers include:
    - TEST
    - FREEDOMPAY
*/
service Payment {

  // Shows whether application is running, whether it crashed if it is
  // not running, and the time that it entered its current state.
  rpc Info (google.protobuf.Empty) returns (PaymentServiceInfo) {}

  // This must be run after the service starts and before running any transactions.
  // The purpose of this service is to choose a payment provider and associated options.
  rpc Configure (PaymentConfiguration) returns (google.protobuf.Empty) {}

  // The Sale service performs an Authorization and Capture.  This makes it a convenient
  // single transaction which will perform a sale.
  rpc Sale (SaleRequest) returns (SaleResponse) {}
}

message PaymentServiceInfo {

  // Status to represent whether the Configure service has been called.
  // Financial transactions will fail unless this value is 'true'.
  bool configured = 1;

  // Current value of the configuration.
  PaymentConfiguration configuration = 2;
}

message PaymentConfiguration {
  repeated PaymentProvider providers = 1;
}

enum PaymentProviderType {
  // Test provider.  Sends an arbitrary success response unless otherwise configured.
  // Does not talk to any payment provider or activate the physical card reader.
  TEST = 0;
  // FreedomPay provider.  Can be configured for development and production.
  FREEDOMPAY = 1;
}

enum PaymentSolutionType {

  // Default should be the POS solution if it is available.  Some providers may not support POS however.
  // Check provider specific documentation to determine the default.
  DEFAULT = 0;

  // POS solution uses a local POS service, usually with a builtin queue and offline batch capabilities.
  // These solutions are often prefered for kiosk implementations as they can continue to process
  // transactions during network outages.
  POS = 1;

  // Cloud solution uses a provider-hosted solution.  This means less moving parts locally, but cannot
  // process transactions during a network outage.
  CLOUD = 2;
}

message PaymentProvider {

  // During configuration the provider name can be set to any value.  Afterwards it will be referred to
  // by this name when issuing a transaction.  This allows multiple payment providers to be saved and
  // selected between.
  string provider_name = 1;

  // This selects the payment company that will facilitate transactions.
  PaymentProviderType provider_type = 2;

  // This selects the specific software product that will facilitate transactions.
  PaymentSolutionType solution = 3;

  // (Optional) This configures the API host that we will communicate with for this provider.
  // It may be a local network address (for POS solutions) or a WAN address (for cloud).
  string host = 4;

  // (Optional) Some solutions, particularly cloud, will require an api_id.  Check the documentation
  // for your specific provider/solution.
  string api_id = 5;

  // (Optional) Some solutions, particularly cloud, will require an api_key.  Check the documentation
  // for your specific provider/solution.
  string api_key = 6;

  // (Optional) This sets the batch interval for POS solutions.  This is offered for convenience so
  // that the application builder does not have to implement scheduling.  If not set it defaults to 'OFF'.
  BatchInterval batch_interval = 7;

  // (Optional) This sets the hour of day that batch processing will run.  It defaults to midnight.
  int32 batch_hour = 8; // 0-23

  enum BatchInterval {
    // Don't run batch transactions automatically.  The application can still trigger them manually however.
    OFF = 0;
    // Run batch transactions daily.
    DAILY = 1;
    // Run batch transactions weekly.
    WEEKLY = 2;
  }
}

message SaleRequest {

  // This section of the request contains generic properties used by all payment providers.  This accounts
  // for the most common payment use cases.  To enable or configure functionality for your specific provider,
  // see the request section that corresponds with your provider.
  StandardSaleRequest sale_request = 1;

  // Options pertaining to FreedomPay.
  FreedomPayRequest freedompay_request = 2;
}

enum Currency {
  // default currency is USD
  USD = 0;
}

message StandardSaleRequest {

  // Name of one of the PaymentProviders provided in configuration.
  string provider_name = 1;

  // Amount in cents.
  int32 amount = 2;

  // Currency.  Default USD.
  Currency currency = 3;

  // (Deprecated) Transaction ID will be generated by the payment provider.
  // This field will be ignored.
  string transaction_id = 4;

  // (Optional) Merchant may wish to associate the transaction with a store or
  // location ID.
  string store_id = 5;

  // (Optional) Merchant may wish to associate the transaction with a unique
  // ID for the kiosk, checkout counter, or other device that the customer or
  // sales clerk may interact with.
  int32 terminal_id = 6;

  // (Optional) Another field that the merchant may use to store a related ID.
  string merchant_ref = 7;

  // (Optional) Number for invoice or purchase order.
  string invoice_number = 8;
}

message SaleResponse {
  // The provider type that was selected for this sale.  E.g. TEST, FREEDOMPAY,
  // WORLDPAY, etc.
  PaymentProviderType provider_type = 1;

  // Standardized fields that will be (mostly) present in every response,
  // regardless of payment provider.  Much of the information here will also be
  // in the provider specific response.  However, your application may have an
  // easier time switching providers at a later time if you rely on these normalized
  // fields when possible.  This is provided purely for your convenience.
  StandardSaleResponse response = 2;

  // Fields specific to FreedomPay.  Will be `null` if FREEDOMPAY is not the `provider_type`.
  FreedomPayResponse freedompay_response = 3;
}

message StandardSaleResponse {

  // This is the main place to check if you want to know a high level status code
  // on whether the request succeeded or the general category of error if one occurred.
  // To know the specific error, check the error string, or the error fields specific to
  // your selected provider.
  ResponseStatus status = 1;

  // This may contain an error message given by the provider.  It will be unmodified if possible.
  string error = 2;

  // The sale amount you are requesting to charge the customer.
  int32 sale_amount = 3;

  // Currency to be charged in.  Default USD.
  Currency currency = 4;

  // May be the last 4 digits, or other format depending on the payment provider.  No card numbers
  // or personal information are retained by the Oak Payment service.  A POS based solution may store
  // personal information locally, particularly in the case of batched transactions.  Please consult
  // your provider specific documentation for more details.
  string masked_card_number = 5;

  // Cardholder name.  May be included by payment provider.
  string name_on_card = 6;

  // A unique transaction ID generated by the payment provider.
  string transaction_id = 7;

  enum ResponseStatus {
    INTERNAL_ERROR = 0; // something internal failed
    ACCEPTED = 1; // success
    REJECTED = 2; // insufficient funds, bad card, etc.
    INPUT_ERROR = 3; // bad input
  }
}
