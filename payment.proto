syntax = "proto3";

import "google/protobuf/empty.proto";
import "payment_providers/freedompay.proto";

package oak.platform;

service Payment {
  rpc Info (google.protobuf.Empty) returns (PaymentInformation) {}
  rpc Configure (PaymentConfiguration) returns (google.protobuf.Empty) {}
  rpc Sale (SaleRequest) returns (SaleResponse) {}
}

message PaymentInformation {
  bool configured = 1;
}

message PaymentConfiguration {
  repeated PaymentProvider providers = 1;
}

enum PaymentProviderType {
  TEST = 0;
  FREEDOMPAY = 1;
}

enum PaymentSolutionType {
  DEFAULT = 0;
  POS = 1;
  CLOUD = 2;
}

message PaymentProvider {
  string name = 1;
  PaymentProviderType provider = 2;
  PaymentSolutionType solution = 3;
  string host = 4;
  string api_id = 5;
  string api_key = 6;
  BatchInterval batch_interval = 7;
  int32 batch_hour = 8; // 0-23

  enum BatchInterval {
    OFF = 0;
    DAILY = 1;
    WEEKLY = 2;
  }
}

message SaleRequest {
  repeated PaymentProviderType provider_type = 1;
  StandardSaleRequest request = 2;
  optional FreedomPayRequest freedompay_request = 3;
}

message StandardSaleRequest {
  string processor = 1; // one of the PaymentProviders provided in configuration
  int32 amount = 2;
  Currency currency = 3;
  string transaction_id = 4;
  string store_id = 5;
  int32 terminal_id = 6;
  string merchant_ref = 7;
  string invoice_number = 8;

  enum Currency {
    USD = 0;
  }
}
message SaleResponse {
  PaymentProviderType provider_type = 1;
  StandardSaleResponse response = 2;
  optional FreedomPayResponse freedompay_response = 3;
}

message StandardSaleResponse {
  ResponseStatus status = 1;
  string error = 2;
  string transaction_id = 3;
  int32 sale_amount = 4;
  string masked_card_number = 5;
  string name_on_card = 6;

  enum ResponseStatus {
    INTERNAL_ERROR = 0; // something internal failed
    ACCEPTED = 1; // success
    REJECTED = 2; // insufficient funds, bad card, etc.
    INPUT_ERROR = 3; // bad input
  }
}
