syntax = "proto3";

import "google/protobuf/empty.proto";

package oak.platform;

service Network {
  // View and configure host's networking settings.

  // Currently, only WPA-PSK WiFi networks are supported. Wired
  // network connections cannot be altered and should be configured
  // via DHCP.

  // Shows network information for all Ethernet and WiFi devices,
  // including current network addresses and MAC addresses.
  rpc Info (google.protobuf.Empty) returns (NetworkInformation) {}

  // Lists visible WiFi networks using the first available WiFi interface
  rpc WiFiScan (google.protobuf.Empty) returns (WiFiScanResults) {}

  // Adds or overwrites configuration for connecting to a specific
  // WiFi network. The host will then attempt to connect to the
  // network whenever it is available. These settings are persisted
  // until `ForgetWifi` is used.
  rpc AddWiFi (WiFiConnectionSettings) returns (google.protobuf.Empty) {}

  // Removes stored WiFi configuration.
  rpc ForgetWiFi (WiFiConnectionSettings) returns (google.protobuf.Empty) {}

  // Lists the WiFi network configurations that are available to this host.
  rpc ListKnownWiFiNetworks (google.protobuf.Empty) returns (WiFiNetworkList) {}

  // Erases any previously configured network settings and drops in
  // provided NetworkManager connections. This supports all types of
  // connection configuration that NetworkManager supports. The
  // automatic connection for Ethernet ports will still be present
  // unless overridden in a provided connection file. Because the
  // configurations may contain passwords they CANNOT be viewed later.
  // CAUTION! If wired connections are configured through this RPC
  // then the automatic DHCP connection may be lost. If all
  // connections become invalid or unusable, the only route of
  // recovery may be to re-install the OS.
  rpc FullyConfigureNetworkManager (NetworkManagerConfiguration) returns (google.protobuf.Empty) {}
}

message NetworkInformation {
  repeated Device devices = 1;
  message Device {
    string device_id = 1;
    Technology technology = 2;
    // aka "MAC Address"
    string hardware_address = 3;
    // string state = 4;
    // string connection_id = 5;
    string ssid = 6;
    repeated string addresses = 7;
    string gateway = 8;
  }
  enum Technology {
    UNKNOWN = 0;
    ETHERNET = 1;  // IEEE 802.3
    WIFI = 2;  // IEEE 802.11
  }
}

message WiFiScanResults {
  repeated AccessPoint visible_access_points = 1;
  message AccessPoint {
    string ssid = 1;
    string hardware_address = 2;
    uint32 strength_percent = 3;
  }
}

message WiFiConnectionSettings {

  // Settings are WPA-PSK, also known as WPA-Personal.
  // This is currently all that is supported.
  string ssid = 1;

  // 'passphrase' will be stored securely and CANNOT be viewed.
  string passphrase = 2;
}

message WiFiNetworkList {
  repeated WiFiConnectionSettings wifi_networks = 2;
}

message NetworkManagerConfiguration {

  // A set of NetworkManager "keyfiles" describing how to connect to
  // networks. Each file is an .ini format file that describes a
  // network connection profile.
  // See: https://developer.gnome.org/NetworkManager/stable/nm-settings-keyfile.html

  // Typically, there would be one file for each network the unit
  // needs to be able to join. These files are normally generated via
  // nm-connection-editor. The recommended work-flow is to set up and
  // test a connection locally and then copy the generated file
  // removing any unnecessary or conflicting fields such as those that
  // contain hardware addresses. Note that '[main]/uuid' is required.
  repeated string connection_file = 1;

  // Certificate files and other assets that a connection_file might
  // reference. If a connection profile needs to reference a
  // certificate, the certificate file can be provided in the
  // 'asset_file' array and then it will be placed at
  // '/network-asset/$N' where $N is the 0-based index in
  // 'asset_file'. For example, if two asset files are provided then
  // in a connection_file they can be referenced as '/network-asset/0'
  // and '/network-asset/1'.
  repeated string asset_file = 2;
}
