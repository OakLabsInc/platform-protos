syntax = "proto3";

import "google/protobuf/empty.proto";

package oak.platform;

service Network {
  /* View and configure host's networking settings.

     Currently, only WPA-PSK WiFi networks are supported. Wired
     network connections cannot be altered and should be configured
     via DHCP. */

  // Shows network information for all Ethernet and WiFi devices,
  // including current network addresses and MAC addresses.
  rpc Info (google.protobuf.Empty) returns (NetworkInformation) {}

  // Lists visible WiFi networks using the first available WiFi interface
  rpc WiFiScan (google.protobuf.Empty) returns (WiFiScanResults) {}
  // Adds or overwrites configuration for connecting to a specific
  // WiFi network. The host will then attempt to connect to the
  // network whenever it is available.
  rpc AddWiFi (WiFiConnectionSettings) returns (google.protobuf.Empty) {}
  // Removes stored WiFi configuration.
  rpc ForgetWiFi (WiFiConnectionSettings) returns (google.protobuf.Empty) {}
  // Lists the WiFi network configurations that are available to this host.
  rpc ListKnownWiFiNetworks (google.protobuf.Empty) returns (WiFiNetworkList) {}
}

message NetworkInformation {
  repeated Device devices = 1;
  message Device {
    string device_id = 1;
    Technology technology = 2;
    // aka "MAC Address"
    string hardware_address = 3;
    // string state = 4;
    // string connection_id = 5;
    string ssid = 6;
    repeated string addresses = 7;
    string gateway = 8;
  }
  enum Technology {
    UNKNOWN = 0;
    ETHERNET = 1;  // IEEE 802.3
    WIFI = 2;  // IEEE 802.11
  }
}

message WiFiScanResults {
  repeated AccessPoint visible_access_points = 1;
  message AccessPoint {
    string ssid = 1;
    string hardware_address = 2;
    uint32 strength_percent = 3;
  }
}

message WiFiConnectionSettings {
  // Settings are WPA-PSK, also known as WPA-Personal.
  // This is currently all that is supported.
  string ssid = 1;
  // 'passphrase' will be stored securely and CANNOT be retrieved via
  // this service.
  string passphrase = 2;
}

message WiFiNetworkList {
  repeated WiFiConnectionSettings wifi_networks = 2;
}
